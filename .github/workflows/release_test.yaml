name: Release Test

on: [push]

jobs:

  package:
    name: Create Package
    runs-on: ubuntu-latest
    container:
      image: danielflook/python-minifier-build:python3.11-2022-10-25
    outputs:
      version: ${{ steps.set-version.outputs.version }}
      wheel: ${{ steps.create-packages.outputs.wheel }}
      sdist: ${{ steps.create-packages.outputs.sdist }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set version statically
        id: set-version
        run: |
          VERSION="$(python3 setup.py --version)"
          sed -i "s/setup_requires=.*/version='$VERSION',/; s/use_scm_version=.*//" setup.py
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Packages
        id: create-packages
        run: |
          pip3 install --upgrade setuptools wheel twine
          python3 setup.py sdist bdist_wheel --universal
          
          echo "wheel=$(echo dist/*.whl)" >> $GITHUB_OUTPUT
          echo "sdist=$(echo dist/*.tar.gz)" >> $GITHUB_OUTPUT          

      - uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/
          if-no-files-found: error

  test_docs:
    name: Test Documentation
    runs-on: ubuntu-latest
    needs: [package]
    container:
      image: danielflook/python-minifier-build:python3.11-2022-10-25
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Install package
        run: |
          pip3 install ${{ needs.package.outputs.sdist }}
          pyminify --version

      - name: Checkout
        uses: actions/checkout@v3

      - name: Build documentation
        run: |
          pip3 install sphinx sphinxcontrib-programoutput sphinx_rtd_theme
          sphinx-build docs/source /tmp/build

  test_package:
    name: Test Package
    runs-on: ubuntu-latest
    needs: [package]
    strategy:
      matrix:
        python: ["2.7", "3.3", "3.4", "3.5", "3.6", "3.7", "3.8", "3.9", "3.10", "3.11"]
        package_type: [.tar.gz, .whl]
      fail-fast: false
    container:
      image: danielflook/python-minifier-build:python${{ matrix.python }}-2022-10-25
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Install package
        run: |
          if [[ ${{ matrix.package_type }} == ".tar.gz" ]]; then
            pip${{ matrix.python }} install ${{ needs.package.outputs.sdist }}
          else
            pip${{ matrix.python }} install ${{ needs.package.outputs.wheel }}
          fi
          
          pyminify --version

      - name: Checkout
        uses: actions/checkout@v3

      - name: Test pyminify
        run: |
          set -x
          cat setup.py | pyminify -
          pyminify setup.py > /tmp/out.min.py
          pyminify setup.py --output /tmp/out.min.py2
          pyminify setup.py src test --in-place
          pyminify test/test_utf8.py
          pyminify test/test_utf8.py --in-place
          pyminify test/test_utf8.py --output out.min.py          

  test_windows_package:
    name: Test Package (windows)
    runs-on: windows-latest
    needs: [package]
    strategy:
      matrix:
        python: ["2.7", "3.3", "3.4", "3.5", "3.6", "3.7", "3.8", "3.9", "3.10", "3.11"]
        package_type: [.tar.gz]
      fail-fast: false
    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Install package
        shell: cmd
        run: |
          dir dist
          pip install ${{ needs.package.outputs.sdist }}
          pyminify --version

      - name: Checkout
        uses: actions/checkout@v3

      - name: Test pyminify
        run: |
          pyminify setup.py
          pyminify setup.py --output out.min.py
          pyminify setup.py src test --in-place
          pyminify test/test_utf8.py
          pyminify test/test_utf8.py --in-place
          pyminify test/test_utf8.py --output out.min.py

  test_typing:
    runs-on: ubuntu-latest
    needs: [package]
    strategy:
      matrix:
        package_type: [.tar.gz, .whl]
      fail-fast: false
    container:
      image: danielflook/python-minifier-build:python3.11-2022-10-25
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Install package
        run: |
          if [[ ${{ matrix.package_type }} == ".tar.gz" ]]; then
            pip3.11 install ${{ needs.package.outputs.sdist }}
          else
            pip3.11 install ${{ needs.package.outputs.wheel }}
          fi

      - name: Checkout
        uses: actions/checkout@v3

      - name: Test typing
        run: |
          pip3.11 install mypy types-setuptools
          mypy typing_test/test_typing.py

          if mypy typing_test/test_badtyping.py; then
            echo "Bad types weren't detected"
            exit 1
          fi

          stubtest python_minifier
